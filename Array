74. Search a 2D Matrix(using Binary Search)... bcs each row is sorted in non-decreasing order.

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();          // for row size
        int col = matrix[0].size();       // for column size

        int start = 0;
        int end = row*col-1;

        int mid = start+(end-start)/2;
        while(start<= end)
        {
            int element = matrix[mid/col][mid%col];
            if(target == element)
                return 1;
            else if(target < element)
                end = mid-1;
            else 
                start = mid + 1;

            mid = start+(end-start)/2;
        }
        return 0;
        
    }


48. Rotate Image...

void rotate(vector<vector<int>>& matrix) {
        //for reverse each columns element i.e. reverse last row with fist row;
        reverse(matrix.begin(), matrix.end());

        //for reverse each row element i.e. reverse last column with first row;
        // for(int i =0 ; i< matrix[0].size() ; i++)
        // {
        //     reverse(matrix[i].begin(), matrix[i].end());
        // }

        //for transpose of the matrix;
        for(int i =0 ; i <matrix.size() ; i++)
        {
            for(int j = i+1; j < matrix[i].size(); j++)
            {
                swap(matrix[i][j], matrix[j][i]);
            }
        }

        // 90: Transpose + Reverse Rows
        // 180: Reverse Rows + Reverse columns
        // 270 : Transpose + Reverse Columns
        
        
    }
    
    
    775. Global and Local Inversions
    
    
    bool isIdealPermutation(vector<int>& nums) {
        //global == local =>if and only if =>nums[i] placed at either ith|| (i-1)th || (i+1)th position... hence

        for(int i = 0 ; i< nums.size() ; i++)
        {
            if(abs(nums[i]-i) > 1)
                return false;
        }
        return true;
    }
    
    
    287. Find the Duplicate Number
    
    int findDuplicate(vector<int>& nums) {
        
        int slow = nums[0];
        int fast = nums[0];
        do
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        fast = nums[0];
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow;
    }
    
    
    88. Merge Sorted Array
    
    
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        // using extra space 
        // int arr[m+n];
        // int i = 0, j = 0, k = 0;
        // while(i< m && j < n)
        // {
        //     if(nums1[i] < nums2[j] )
        //         arr[k++] = nums1[i++];
        //     else
        //         arr[k++] = nums2[j++];
            
        // }
        // while(i<m)
        //     arr[k++] = nums1[i++];
            
        // while(j< n)
        //     arr[k++] = nums2[j++];
        // for(i = 0; i< m+n ; i++)
        //     nums1[i] = arr[i];


        // without using extra space
        int i = m-1, j = n-1 , k = m+n-1;
        while(i>=0 && j >= 0)
        {
            if(nums1[i] > nums2[j])
            {
                nums1[k--] = nums1[i--];
            }
            else
            {
                nums1[k--] = nums2[j--];
            }
        }
        while(i>= 0)
            nums1[k--] = nums1[i--];
        while(j>= 0)
            nums1[k--] = nums2[j--];

    }
    
    
    56. Merge Intervals
    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> mergedInterval;
        if(intervals.size()==0)
            return mergedInterval;
        sort(intervals.begin(), intervals.end());
        vector<int> tempInterval = intervals[0];
        for(auto it : intervals)
        {
            if(it[0] <= tempInterval[1])
            {
                tempInterval[1] = max(it[1],tempInterval[1]);
            }
            else
            {
                mergedInterval.push_back(tempInterval);
                tempInterval = it;
            }
        }
        mergedInterval.push_back(tempInterval);
        return mergedInterval;
        
    }
    
    75. Sort Colors
    
    void sortColors(vector<int>& nums) {
        int low = 0;
        int high = nums.size()-1;
        int mid = 0;
        while(mid <= high)
        {
            switch(nums[mid])
            {
                case 0:
                    swap(nums[low++], nums[mid++]);
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    swap(nums[mid], nums[high--]);
                    break;
            }
        }
        
    }
    
    
    53. Maximum Subarray
    
    int maxSubArray(vector<int>& nums) {
        int sum = 0; 
        int maxi = INT_MIN;
        for(int x : nums)
        {
            sum += x;
            maxi = max(maxi, sum);
            if(sum < 0) sum = 0;
        }
        
        return maxi;
    }
    
    31. Next Permutation
    
    void nextPermutation(vector<int>& nums) {
        if(nums.size()== 1)
            return ;
        
        int idx1 ;
        for(int i = nums.size()-2 ; i>= 0 ; i--)
        {
            if(nums[i] < nums[i+1])
            {
                idx1 = i; 
                break;
            }
        }

        if(idx1 < 0)
            reverse(nums.begin() , nums.end());
        else
        {
            int idx2 = 0;
            for(int j = nums.size()-1; j >= 0 ; j--)
            {
                if(nums[j] > nums[idx1])
                {
                    idx2 = j;
                    break;
                }
            }

            swap(nums[idx1], nums[idx2]);
            reverse(nums.begin()+ idx1+1 , nums.end());


        }
        
    }
    
    
    73. Set Matrix Zeroes
    
    void setZeroes(vector<vector<int>>& matrix) {
        vector<int> row, col;
        int n = matrix.size();
        int m = matrix[0].size();
        for(int i=0; i<n ; i++)
        {
            for(int j = 0;j<m ; j++)
            {
                if(matrix[i][j]==0)
                {
                    row.push_back(i);
                    col.push_back(j);
                }
            }
        }

        // row ko zero karo
        for(int i = 0 ; i< row.size(); i++)
        {
            int index = row[i];
            for(int j = 0; j <m ; j++)
            {
                matrix[index][j]=0;
            }
        }


        // col ko zero karo
        for(int i = 0 ; i< col.size(); i++)
        {
            int index = col[i];
            for(int j = 0; j <n ; j++)
            {
                matrix[j][index]=0;
            }
        }
        
    }
    
    
    118. Pascal's Triangle
    
     vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans(numRows);
        for(int i = 0; i<numRows;i++)
        {
            ans[i].resize(i+1);
            ans[i][0] = ans[i][i]= 1;

            for(int j = 1; j<i; j++)
            {
                ans[i][j] = ans[i-1][j-1] + ans[i-1][j];
            }

            
        }
        
        

        return ans;
        
    }
