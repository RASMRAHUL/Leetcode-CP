First Understand this problem i.e. first and then second Problem i.e. second and so on....

1751. Maximum Number of Events That Can Be Attended II..........(First Solved).........



class Solution {
public:
    int n ;
    vector<vector<int>> dp;
    int solve(vector<vector<int>>& events,int idx, int k)
    {
        if(idx>= n || k == 0)
            return 0;
        
        if(dp[idx][k] != -1)
            return dp[idx][k];

        int start = events[idx][0];
        int end = events[idx][1];
        int value = events[idx][2];

        int skip = solve(events, idx+1, k);

        // Linear Search 
        // int j = idx+1;
        // for( ; j< n ;j++)
        // {
        //     if(events[j][0] > events[idx][1])
        //         break;
        // }

        // Binary Search
        vector<int> temp = {end, INT_MAX, INT_MAX};
        int j = upper_bound(events.begin()+idx + 1, events.end(), temp) - events.begin();


        
        int take = value + solve(events, j, k-1);

        return dp[idx][k] =  max(skip, take);
        
    }

    int maxValue(vector<vector<int>>& events, int k) {
        n = events.size();
        sort(events.begin(), events.end());
        dp.resize(n+1, vector<int> (k+1, -1));
        
        return solve(events, 0, k);
    }
};
