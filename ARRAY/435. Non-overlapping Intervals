435. Non-overlapping Intervals.................


class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin() , intervals.end());
        int count = 0;
        int i = 1;
        vector<int> L = intervals[0];
        while(i< intervals.size())
        {
            int curr_start = intervals[i][0];
            int curr_end = intervals[i][1];
            int last_end = L[1];
            if(last_end <= curr_start) // non overlapping conditions
            {
                L = intervals[i];
               
                
            }
            else if(last_end <= curr_end)   // overlapping conditions
            {
                count++;
                
            }
            else if( last_end > curr_end)
            {
                count++;
                L = intervals[i];
                
            }

            i++;
        }

        return  count;
    }
};


// APPROACH  1: ***************************************************************************************************



// class Solution {
// public:
//     int eraseOverlapIntervals(vector<vector<int>>& intervals) {
//         sort(intervals.begin() , intervals.end());
//         int count = 0;
//         int i = 0, j= 1;
//         while(j < intervals.size())
//         {
//             vector<int> curr_interval = intervals[i];
//             vector<int> next_interval = intervals[j];

//             int cs= curr_interval[0];
//             int ce= curr_interval[1];
//             int ns= next_interval[0];
//             int ne= next_interval[1];

//             if(ce <= ns)  // non overlapping conditions...
//             {
//                 i = j;
//                 j++;
//             }
//             else if(ce <= ne)  // overlapping condition...
//             {
//                 j++;
//                 count++;
//             }
//             else if(ce > ne)  // overlapping condition...
//             {
//                 i = j ;
//                 j++;
//                 count++;
//             }
            
//         }

//         return count;
        
//     }
// };
